<div class="auth-box">
  <h2 class="auth-align-center">🏦공인중개사님, 환영합니다!🏦</h2>
  <form
    action="/auth/register/agent"
    name="register"
    method="post"
    id="register"
  >
    <table class="uk-table uk-table-divider">
      <tr>
        <td style="width:40%"><label for="username">아이디</label></td>
        <td><input class="uk-input" name="username" placeholder="아이디 입력" required /></td>
      </tr>

      <tr>
        <td><label for="password">비밀번호</label></td>
        <td>
          <input
            class="uk-input"
            name="password"
            placeholder="비밀번호 입력"
            type="password"
            value=""
            onkeyup="validatePassword(this.value)"
          />
          <p id="passwordMessage" class="error"></p>
        </td>
      </tr>

      <tr>
        <td><label for="phone">핸드폰 번호 (필수)</label></td>
        <td>
          <input
            class="uk-input"
            oninput="autoHyphen2(this)"
            maxlength="13"
            id="residentPhone"
            name="phone"
            placeholder="010-0000-0000"
          />
        </td>
      </tr>

      <tr>
        <td><label for="realname">실명</label></td>
        <td><input class="uk-input" name="realname" placeholder="실명 입력" required /></td>
      </tr>

      <tr>
        <td><label for="agentList_sys_regno">중개업등록번호</label></td>
        <td>
          <input
            class="uk-input"
            id="agentList_sys_regno"
            name="agentList_sys_regno"
            placeholder="115002018000208"
            required
          />
        </td>
      </tr>

      <tr>
        <td>
          <button class="uk-button uk-button-default" onclick="getAgentPhoneNumber()" type="button">
            핸드폰 번호 불러오기
          </button>
        </td>

        <td><p id="agent_phone_number"></p></td>
      </tr>

      <tr>
        <td><label for="email">본인 확인 이메일 (필수)</label></td>
        <td><input class="uk-input" name="email" id="email" placeholder="이메일 입력" type="email" value="" required /></td>
      </tr>

      <tr
        id="verificationCodeContainer"
        style="display: none"
      >
        <td><label for="verificationCode">이메일 인증 코드</label></td>
        <td>
          <input
            class="uk-input"
            id="verificationCode"
            name="verificationCode"
            placeholder="인증 코드 입력"
            required
          />
        </td>
      </tr>

      <tr>
        <td>
          <button class="uk-button uk-button-default" onclick="sendVerificationEmail()" type="button">
            이메일 인증 코드 전송
          </button>
        </td>
        <td>
          <button class="uk-button uk-button-default" onclick="verifyEmail()" type="button" style="display: none">
            이메일 인증 확인 하기
          </button>
          <div id="verificationStatus"></div>
        </td>
      </tr>

      <tr>
        <td colspan="2" align="center"><button class="uk-button uk-button-default" type="submit" form="register">회원가입</button></td>
      </tr>
    </table>
  </form>
</div>

<script>
  const autoHyphen2 = (target) => {
    target.value = target.value
      .replace(/[^0-9]/g, '')
      .replace(/^(\d{0,3})(\d{0,4})(\d{0,4})$/g, "$1-$2-$3").replace(/(\-{1,2})$/g, "");
  }

  function validatePassword(password) {
    const passwordMessage = document.getElementById("passwordMessage");

    const minLength = 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasSpecial = /^(?=.*[!@#%&])/.test(password);

    if (password.length < minLength) {
      passwordMessage.innerText = `비밀번호는 ${minLength}자 이상이어야 합니다.`;
    } else if (!hasUppercase) {
      passwordMessage.innerText = "비밀번호에는 대문자가 포함되어야 합니다.";
    } else if (!hasLowercase) {
      passwordMessage.innerText = "비밀번호에는 소문자가 포함되어야 합니다.";
    } else if (!hasNumber) {
      passwordMessage.innerText = "비밀번호에는 숫자가 포함되어야 합니다.";
    } else if (!hasSpecial) {
      passwordMessage.innerText = "비밀번호에는 특수기호가 포함되어야 합니다";
    } else {
      passwordMessage.innerText = "";
    }
  }

  async function getAgentPhoneNumber() {
    const sysRegnoElement = document.getElementById("agentList_sys_regno");

    const response = await fetch(
      `/auth/phoneNumber?sysRegno=${sysRegnoElement.value}`
    );
    const result = await response.json();
    if (!result.phoneNumber)
      return alert("Failed to get a phone number of agent");

    const agentPhoneNumberElement =
      document.getElementById("agent_phone_number");

    agentPhoneNumberElement.innerText = result.phoneNumber;
  }

  async function generateActivationCode() {
    const response = await fetch("/randomBytes?length=16");
    const randomBytes = await response.arrayBuffer();
    const hexString = Array.from(new Uint8Array(randomBytes))
      .map((byte) => byte.toString(16).padStart(2, "0"))
      .join("");

    return hexString;
  }

  async function sendVerificationEmail() {
    const emailElement = document.getElementById("email");
    if(emailElement.value === '') {
      alert('인증번호를 전송할 이메일 주소를 작성하세요');
      return;
    }
    alert('인증번호가 전송되었습니다.');
    await fetch("/auth/certification", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email: emailElement.value }),
    });

    const verificationCodeContainer = document.getElementById(
      "verificationCodeContainer"
    );
    const verificationCodeElement = document.getElementById("verificationCode");
    const verifyEmailButton = document.querySelector(
      "button[onclick='verifyEmail()']"
    );

    // const activationCode = await generateActivationCode();

    // console.log("Activation Code:", activationCode);

    // verificationCodeElement.value = activationCode;

    verificationCodeContainer.style.display = "";
    verifyEmailButton.style.display = "block";
  }

  async function verifyEmail() {
    const emailElement = document.getElementById("email");
    const verificationCodeElement = document.getElementById("verificationCode");

    const result = await fetch("/auth/certification-check", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: emailElement.value,
        code: verificationCodeElement.value,
      }),
    });

    // const storedVerificationCode = verificationCodeElement.value.trim();
    // const userVerificationCode = prompt(
    //   "Enter the verification code from your email:"
    // );

    const verificationStatusElement =
      document.getElementById("verificationStatus");

    if (result.status === 200) {
      verificationStatusElement.innerText = "이메일 인증이 완료되었습니다.";
      verificationStatusElement.style.color = "green";
    } else {
      verificationStatusElement.innerText = "이메일 인증이 실패했습니다.";
      verificationStatusElement.style.color = "red";
    }
  }
</script>
